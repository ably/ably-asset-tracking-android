buildscript {
    ext.kotlin_version = '1.6.10'
    ext.copyright_message = 'Copyright 2020-2021 Ably Real-time Ltd (ably.com)'
    // The version of Ably's client library for Java that we're using.
    // Source code: https://github.com/ably/ably-java
    // Maven coordinates: groupId 'io.ably', artifactId ':'ably-android'.
    ext.ably_core_version = '1.2.18'

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.1.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // Firebase Crashlytics
        // see: https://firebase.google.com/docs/crashlytics/get-started?platform=android
        classpath 'com.google.gms:google-services:4.3.5'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.5.2'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id 'org.jlleitschuh.gradle.ktlint' version '10.2.1'
    id 'org.jetbrains.dokka' version '1.4.32'
    id 'io.github.gradle-nexus.publish-plugin' version "1.1.0"
}

// https://github.com/Kotlin/dokka/issues/2202#issuecomment-950666269
tasks.dokkaHtmlMultiModule.configure {
    pluginsMapConfiguration.set(
        ["org.jetbrains.dokka.base.DokkaBase": """{ "footerMessage": "$copyright_message"}"""]
    )
}

allprojects {
    // group and version properties are configured here as they're inherited by the maven-publish plugin.
    group = 'com.ably.tracking'

    // version MUST conform to the Semantic Versioning Specification (https://semver.org/) version 2.0.0
    // on incrementing this value, ensure to also increment versionCode in android defaultConfig (also in this file)
    version = '1.4.0'

    // Values used to publish the SDK to maven repositories.
    ext {
        PUBLISH_GROUP_ID = group
        PUBLISH_ARTIFACT_ID = project.name // This returns the module/project name, like "publishing-sdk".
        PUBLISH_VERSION = version
        PUBLISH_POM_NAME = "${PUBLISH_GROUP_ID}:${PUBLISH_ARTIFACT_ID}"
    }

    repositories {
        google()
        mavenCentral()
        maven {
            url 'https://api.mapbox.com/downloads/v2/releases/maven'
            authentication {
                basic(BasicAuthentication)
            }
            credentials {
                username = 'mapbox'
                password = property('MAPBOX_DOWNLOADS_TOKEN')
            }
        }
    }
}

subprojects {
    // We have to configure android in afterEvaluate because, otherwise, we get a Gradle error.
    // https://stackoverflow.com/a/21032272
    // Same goes for testImplementation() method.
    afterEvaluate { evaluatedSubProject ->
        final evaluatedSubProjectIsALibrary = evaluatedSubProject.pluginManager.hasPlugin('com.android.library')
        final evaluatedSubProjectIsAnApp = evaluatedSubProject.pluginManager.hasPlugin('com.android.application')
        final evaluatedSubProjectIsAnExampleApp = evaluatedSubProjectIsAnApp && evaluatedSubProject.name.contains('example')
        final evaluatedSubProjectIsKotlin = evaluatedSubProject.pluginManager.hasPlugin('kotlin-android')

        // This is a convention for this Gradle modules/projects in this repository.
        // If the name has 'java' on the end (e.g. 'subscribing-sdk-java') or in the
        // middle (e.g. 'subscribing-example-java-app') then it is intended to either
        // contain Java source code (example app implementation) or contain interfaces
        // which provide support to Java users ('-java' as a suffix).
        final evaluatedSubProjectIsJava = evaluatedSubProject.name.contains('-java')

        // Dokka configuration for modules
        // "The configuration must be done both for the subprojects (pages generated for packages, classes, etc.) and for the overall dokka multi-module task."
        // See https://github.com/Kotlin/dokka/issues/2202#issuecomment-950136122 for more
        final evaluatedSubProjectHasDokkaPlugin = evaluatedSubProject.pluginManager.hasPlugin('org.jetbrains.dokka')
        if (evaluatedSubProjectHasDokkaPlugin) {
            tasks.withType(dokkaHtmlPartial.getClass()).configureEach {
                pluginsMapConfiguration.set(
                    ["org.jetbrains.dokka.base.DokkaBase": """{ "footerMessage": "$copyright_message"}"""]
                )
            }
        }

        android {
            compileSdkVersion 31
            buildToolsVersion '30.0.3'

            defaultConfig {
                minSdkVersion((evaluatedSubProjectIsJava || evaluatedSubProjectIsAnExampleApp) ? 24 : 21)
                targetSdkVersion 31

                // We have no reason not to match versions assigned to all artifacts generated by
                // projects in this repository. Therefore, this same version number is used for SDK and
                // example app projects alike.
                // - versionCode MUST be incremented by 1 for each release from the main branch
                versionCode 32
                versionName version

                testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

                if (evaluatedSubProjectIsAnApp) {
                    multiDexEnabled true
                }
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }

            if (evaluatedSubProjectIsKotlin) {
                kotlinOptions {
                    jvmTarget = '1.8'
                    allWarningsAsErrors = true
                    freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'
                }
            }

            // https://developer.android.com/reference/tools/gradle-api/4.1/com/android/build/api/dsl/LintOptions
            // http://tools.android.com/tips/lint-checks
            lintOptions {
                warningsAsErrors true
                checkTestSources true

                // More accessible output, when run from command line and in CI/CD environments.
                textReport true
                textOutput 'stdout'
                explainIssues false

                // Lint rules which we might care about at some point, but need not fail the build.
                informational 'GradleDependency',
                    'NewerVersionAvailable',
                    'AllowBackup',
                    'VectorPath',
                    'ContentDescription',
                    'UnusedResources',
                    'UnpackedNativeCode',
                    'LockedOrientationActivity',
                    'IconLocation',
                    'StopShip',
                    'DefaultLocale',
                    'ObsoleteSdkInt'

                // Lint rules which are disabled by default (see: lint --show), but which we would
                // rather were enabled.
                error 'MissingRegistered',
                    'Registered',
                    'WrongThreadInterprocedural',
                    'MinSdkTooLow',
                    'MangledCRLF',
                    'EasterEgg',
                    'LogConditional',
                    'UnusedIds'
            }

            // https://developer.android.com/studio/build/build-variants#build-types
            buildTypes {
                // Helper function allowing to create our custom DSL and hide setting the delegate
                def apply = { action ->
                    [on: { delegateObject ->
                        action.delegate = delegateObject
                        action()
                    }]
                }

                def secretConfigFields = {
                    // Configuration that must not be applied to SDK project main source set builds for the release variant/buildType.
                    // This configuration is, however, required for Android's connectedCheck task (which uses the androidTest source set
                    // with the debug variant/buildType).
                    buildConfigField 'String', 'ABLY_API_KEY', "\"${findProperty('ABLY_API_KEY') ?: ""}\""
                    buildConfigField 'String', 'MAPBOX_ACCESS_TOKEN', "\"${findProperty('MAPBOX_ACCESS_TOKEN') ?: ""}\""
                }

                def versionConfigFields = {
                    // Android library modules don't have access to both versionName and versionCode fields
                    // so we're adding them by ourselves.
                    buildConfigField "String", "VERSION_NAME", "\"${defaultConfig.versionName}\""
                    buildConfigField "long", "VERSION_CODE", "${defaultConfig.versionCode}"
                }

                debug {
                    apply secretConfigFields on it
                    apply versionConfigFields on it
                }

                release {
                    // Secrets must not be injected into SDK builds - they are only for example apps or SDK
                    // integration tests (via Android's `connectedCheck` task), which are testing using the debug
                    // variant/buildType.
                    if (evaluatedSubProjectIsAnApp) {
                        apply secretConfigFields on it
                    }
                    if (evaluatedSubProjectIsALibrary) {
                        apply versionConfigFields on it
                    }

                    minifyEnabled false
                }
            }
        }

        // https://github.com/jlleitschuh/ktlint-gradle#configuration
        ktlint {
            verbose = true // shows rule name that failed
            android = true
            outputColorName = 'RED' // easier to spot failures in console output
            disabledRules = [
                // according to a Github issue comment this issue could be resolved with Kotlin 1.4
                // https://github.com/pinterest/ktlint/issues/527#issuecomment-705871614
                'import-ordering',
            ]
        }

        dependencies {
            implementation 'androidx.appcompat:appcompat:1.4.1'
            implementation 'com.google.android.material:material:1.5.0'

            if (evaluatedSubProjectIsKotlin) {
                implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                implementation 'androidx.core:core-ktx:1.3.2'
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2'

                // Projects that use our SDK projects will crash when dispatching to the Main thread on
                // the Android runtime unless we include this dependency. See:
                // https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2'
                testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.2"
                testImplementation 'io.mockk:mockk:1.12.2'
            } else {
                testImplementation 'org.mockito:mockito-core:3.6.28'
            }

            if (evaluatedSubProjectIsAnApp) {
                implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
                implementation 'androidx.multidex:multidex:2.0.1'
                implementation 'com.jakewharton.timber:timber:4.7.1'
            }

            testImplementation 'junit:junit:4.13.2'
            testImplementation project(':test-common')

            androidTestImplementation 'androidx.test.ext:junit:1.1.3'
            androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
            androidTestImplementation project(':android-test-common')
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

apply from: "maven-central.gradle"
