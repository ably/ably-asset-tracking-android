// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = "1.3.72"
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:4.1.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id 'org.jlleitschuh.gradle.ktlint' version '9.4.1'
}

allprojects {
    repositories {
        google()
        jcenter()
        maven {
            url 'https://api.mapbox.com/downloads/v2/releases/maven'
            authentication {
                basic(BasicAuthentication)
            }
            credentials {
                username = "mapbox"
                password = property('MAPBOX_DOWNLOADS_TOKEN')
            }
        }
    }
}

subprojects {
    // We have to configure android in afterEvaluate because, otherwise, we get a Gradle error.
    // https://stackoverflow.com/a/21032272
    // Same goes for testImplementation() method.
    afterEvaluate { evaluatedSubProject ->
        final evaluatedSubProjectIsALibrary = evaluatedSubProject.pluginManager.hasPlugin('com.android.library')
        final evaluatedSubProjectIsAnApp = evaluatedSubProject.pluginManager.hasPlugin('com.android.application')
        final evaluatedSubProjectIsKotlin = evaluatedSubProject.pluginManager.hasPlugin('kotlin-android')

        // This is a convention for this Gradle modules/projects in this repository.
        // If the name has 'java' on the end (e.g. 'subscribing-sdk-java') or in the
        // middle (e.g. 'subscribing-example-java-app') then it is intended to either
        // contain Java source code (example app implementation) or contain interfaces
        // which provide support to Java users ('-java' as a suffix).
        final evaluatedSubProjectIsJava = evaluatedSubProject.name.contains('-java')

        android {
            compileSdkVersion 30
            buildToolsVersion "30.0.2"

            defaultConfig {
                minSdkVersion (evaluatedSubProjectIsJava ? 24 : 21)
                targetSdkVersion 30

                // We have no reason not to match versions assigned to all artifacts generated by
                // projects in this repository. Therefore, this same version number is used for SDK and
                // example app projects alike.
                // - versionCode MUST be incremented by 1 for each release from the main branch
                // - versionName MUST conform to the Semantic Versioning Specification (https://semver.org/) version 2.0.0
                versionCode 3
                versionName "1.0.0-beta.1"

                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

                if (evaluatedSubProjectIsALibrary) {
                    consumerProguardFiles "consumer-rules.pro"
                }
                if (evaluatedSubProjectIsAnApp) {
                    multiDexEnabled true
                }
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }

            if (evaluatedSubProjectIsKotlin) {
                kotlinOptions {
                    jvmTarget = '1.8'
                    allWarningsAsErrors = true

                    // The actor method from kotlinx.coroutines is obsolete, despite there not being a replacement for it yet!
                    // That means we get the following warning on build when we use it:
                    //   "This declaration is experimental and its usage should be marked with '@kotlinx.coroutines.ObsoleteCoroutinesApi' or '@OptIn(kotlinx.coroutines.ObsoleteCoroutinesApi::class)'"
                    // We can continue using it by marking our implementing methods with @OptIn(ObsoleteCoroutinesApi::class),
                    // as the message suggests, however that then results in the following build failure message:
                    //   "This class can only be used with the compiler argument '-Xopt-in=kotlin.RequiresOptIn'"
                    // So, based on this documentation:
                    //   https://kotlinlang.org/docs/reference/opt-in-requirements.html#module-wide-opt-in
                    // this compiler argument solves that build failure:
                    freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
                }
            }

            // https://developer.android.com/reference/tools/gradle-api/4.1/com/android/build/api/dsl/LintOptions
            // http://tools.android.com/tips/lint-checks
            lintOptions {
                warningsAsErrors true
                checkTestSources true

                // More accessible output, when run from command line and in CI/CD environments.
                textReport true
                textOutput 'stdout'
                explainIssues false

                // Lint rules which we might care about at some point, but need not fail the build.
                informational 'GradleDependency',
                              'NewerVersionAvailable',
                              'AllowBackup',
                              'VectorPath',
                              'ContentDescription',
                              'UnusedResources',
                              'UnpackedNativeCode',
                              'LockedOrientationActivity',
                              'IconLocation',
                              'StopShip'

                // Lint rules which are disabled by default (see: lint --show), but which we would
                // rather were enabled.
                error 'MissingRegistered',
                      'Registered',
                      'WrongThreadInterprocedural',
                      'MinSdkTooLow',
                      'MangledCRLF',
                      'EasterEgg',
                      'LogConditional',
                      'UnusedIds'
            }

            def applySecretBuildConfigFields = { buildType ->
                // Configuration that must not be applied to SDK project main source set builds for the release variant/buildType.
                // This configuration is, however, required for Android's connectedCheck task (which uses the androidTest source set
                // with the debug variant/buildType).
                // TODO drop buildType param by using closure delegate, which might be cleaner, or find alternative
                // https://developer.android.com/reference/tools/gradle-api/4.1/com/android/build/api/dsl/VariantDimension#buildConfigField(kotlin.String,%20kotlin.String,%20kotlin.String)
                buildType.buildConfigField 'String', 'ABLY_API_KEY', "\"${property('ABLY_API_KEY')}\""
                buildType.buildConfigField 'String', 'MAPBOX_ACCESS_TOKEN', "\"${property('MAPBOX_ACCESS_TOKEN')}\""
            }

            // https://developer.android.com/studio/build/build-variants#build-types
            buildTypes {
                debug {
                    applySecretBuildConfigFields delegate
                }

                release {
                    // Secrets must not be injected into SDK builds - they are only for example apps or SDK
                    // integration tests (via Android's `connectedCheck` task), which are testing using the debug
                    // variant/buildType.
                    if (evaluatedSubProjectIsAnApp) {
                        applySecretBuildConfigFields delegate
                    }

                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                }
            }
        }

        // https://github.com/jlleitschuh/ktlint-gradle#configuration
        ktlint {
            version = '0.39.0' // override because v.9.4.1 of org.jlleitschuh.gradle.ktlint plugin is at 0.38.1 which has issues
            verbose = true // shows rule name that failed
            android = true
            outputColorName = 'RED' // easier to spot failures in console output
            disabledRules = [
                // according to a Github issue comment this issue could be resolved with Kotlin 1.4
                // https://github.com/pinterest/ktlint/issues/527#issuecomment-705871614
                "import-ordering",
            ]
        }

        dependencies {
            implementation 'androidx.appcompat:appcompat:1.2.0'
            implementation 'com.google.android.material:material:1.2.1'
            implementation 'com.jakewharton.timber:timber:4.7.1'

            if (evaluatedSubProjectIsKotlin) {
                implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                implementation 'androidx.core:core-ktx:1.3.2'
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2'

                // Projects that use our SDK projects will crash when dispatching to the Main thread on
                // the Android runtime unless we include this dependency. See:
                // https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2'

                testImplementation 'io.mockk:mockk:1.10.2'
            } else {
                testImplementation 'org.mockito:mockito-core:3.6.28'
            }

            if (evaluatedSubProjectIsALibrary) {
                implementation 'io.ably:ably-android:1.2.2'
            }

            if (evaluatedSubProjectIsAnApp) {
                implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
                implementation 'androidx.multidex:multidex:2.0.1'
                implementation 'pub.devrel:easypermissions:2.0.1'
            }

            testImplementation 'junit:junit:4.13.1'

            androidTestImplementation 'androidx.test.ext:junit:1.1.2'
            androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
            androidTestImplementation project(':android-test-common')
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
